class Solution {
    public int deleteAndEarn(int[] nums) {
        Arrays.sort(nums);
        List<int []> ls =new ArrayList<>();
        //find frequecy of every number and store unique numbers and its frequency in list
        for(int i=0;i<nums.length;i++){
            if(!ls.isEmpty() && ls.get(ls.size()-1)[0]==nums[i])
            ls.get(ls.size()-1)[1]++;
            else
            ls.add(new int[]{nums[i],1});
        }
        int n=ls.size();
        return solve(ls,0,new int[n],n);
    }
    public int solve(List<int[]> ls,int i,int[] dp,int n){
        if(i>=n)
        return 0;
        if(dp[i]!=0)
        return dp[i];
        int curr=ls.get(i)[0]*ls.get(i)[1];
        //value including current number and number after 2 index
        int next_include=solve(ls,i+2,dp,n) + curr;
        //value of next number
        int next_exclude=solve(ls,i+1,dp,n);
        //if next number is not equal to this number+1, then add curr value to excluded value 
        if(i<n-1 && ls.get(i+1)[0]!=ls.get(i)[0]+1)
        next_exclude+=curr;
        dp[i]=Math.max(next_include,next_exclude);
        return dp[i];
    }
}
